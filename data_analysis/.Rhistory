adjusted_temperature_estimate = case_when(
bad_trial ~ temperature_estimate + rnorm(n(),0,0.01),
TRUE ~ as.double(temperature_estimate)
)
) %>%
add_bootstrapping_estimates(4,F) %>%
mutate(
type = case_when(
type == 'challenging' ~ 'Challenging',
type == 'kind' ~ 'Kind',
type == 'wicked' ~ 'Wicked'
),
type = factor(type,levels=c('Kind','Challenging','Wicked'))
)
kind_cities = c('Baltimore', 'Charlotte', 'Denver', 'Orlando', 'Portland', 'Sacramento', 'San Antonio', 'St. Louis')
challenging_cities = c('Cairo', 'Delhi', 'Lagos', 'London', 'Mexico City', 'Paris', 'Tokyo', 'Toronto')
wicked_cities = c('Auckland', 'Buenos Aires', 'Johannesburg', 'Luanda', 'Lima', 'Sao Paulo', 'Sydney', 'Santiago')
all_cities = c(kind_cities,challenging_cities,wicked_cities)
experiment_data$ordered_predictor_city = factor(experiment_data$predictor_city,levels=all_cities)
# Estimate abilities from IRT model and add to experiment_data
# Prep worker data and irt data
# Add worker data to
worker_data = data.frame()
for (hit in experiment_hits){
filepath = paste0('../experiment_data/',hit,'/worker_data.csv')
curr_data = filepath %>%
read.csv()
worker_data = rbind(worker_data,curr_data)
}
knitr::opts_chunk$set(echo = TRUE)
# Load packages
library(dplyr)
library(emmeans)
library(lme4)
library(lmerTest)
library(here)
library(ltm)
library(glmnet)
library(ggplot2)
library(stringi)
library(lubridate)
source('multi-choice-utils.R')
# Set up tableau color palette
tableau_palette = c("#4E79A7","#F28E2B","#E15759","#76B7B2","#59A14F","#EDC948","#B07AA1","#FF9DA7","#9C755F","#BAB0AC")
# Load pilot data
experiment_hits = c(
'3TTPFEFXCTP55PLBCVCFYHKFEQCH6O',
'3PCPFX4U40VE1BDPWE2D11PTYDHQF4',
'3RWO3EJELHE2BKI2P283CUVPS8L1PY',
'3BAWBGQGYL4TRQU00UYBJWBKHJRV7H',
'3BAWBGQGYL4TRQU00UYBJWBKHJUV7K'
)
raw_experiment_data = experiment_hits %>%
load_experiment_data()
getwd()
knitr::opts_chunk$set(echo = TRUE)
# Load packages
library(dplyr)
library(emmeans)
library(lme4)
library(lmerTest)
library(here)
library(ltm)
library(glmnet)
library(ggplot2)
library(stringi)
library(lubridate)
source('multi-choice-utils.R')
# Set up tableau color palette
tableau_palette = c("#4E79A7","#F28E2B","#E15759","#76B7B2","#59A14F","#EDC948","#B07AA1","#FF9DA7","#9C755F","#BAB0AC")
raw_experiment_data = read.csv('../experiment_data/raw_experiment_data.csv')
bad_workers = raw_experiment_data %>%
group_by(workerId_hash) %>%
summarize(
n=n()
) %>%
subset(n != 48)
experiment_data = raw_experiment_data %>%
subset(!(workerId_hash %in% bad_workers$workerId_hash)) %>%
identify_junk() %>%
subset(is_practice == "False") %>%
subset(passed_check == T) %>%
mutate(
trial_id =  paste(workerId_hash,hitId,predictor_city,sep='-'),
year = 2023,
) %>%
threshold_estimates()
bad_trials = experiment_data %>%
group_by(trial_id) %>%
summarize(num_temps = length(unique(temperature_estimate))) %>%
subset(num_temps <= 2) %>%
pull(trial_id) %>%
unique()
experiment_data = experiment_data %>%
mutate(
bad_trial = trial_id %in% bad_trials,
adjusted_temperature_estimate = case_when(
bad_trial ~ temperature_estimate + rnorm(n(),0,0.01),
TRUE ~ as.double(temperature_estimate)
)
) %>%
add_bootstrapping_estimates(4,F) %>%
mutate(
type = case_when(
type == 'challenging' ~ 'Challenging',
type == 'kind' ~ 'Kind',
type == 'wicked' ~ 'Wicked'
),
type = factor(type,levels=c('Kind','Challenging','Wicked'))
)
kind_cities = c('Baltimore', 'Charlotte', 'Denver', 'Orlando', 'Portland', 'Sacramento', 'San Antonio', 'St. Louis')
challenging_cities = c('Cairo', 'Delhi', 'Lagos', 'London', 'Mexico City', 'Paris', 'Tokyo', 'Toronto')
wicked_cities = c('Auckland', 'Buenos Aires', 'Johannesburg', 'Luanda', 'Lima', 'Sao Paulo', 'Sydney', 'Santiago')
all_cities = c(kind_cities,challenging_cities,wicked_cities)
experiment_data$ordered_predictor_city = factor(experiment_data$predictor_city,levels=all_cities)
# Add worker data to
worker_data = read.csv('../experiment_data/comprehension_data.csv')
irt_data = dplyr::select(worker_data,matches("correct"))
irt_data = irt_data[,order(colnames(irt_data))]
irt_data = data.frame(sapply(irt_data, \(x) +as.logical(x)))
# Convert to 0/1
#irt_model = ltm(irt_data ~ z1)
irt_model = tpm(irt_data) # Three-parameter model
worker_data$ability = factor.scores(irt_model, resp.patterns = irt_data)$score.dat$z1
# Merge worker data with experiment_test
experiment_data = experiment_data %>%
merge(worker_data,by='workerId_hash',all.x=T)
knitr::opts_chunk$set(echo = TRUE)
# Load packages
library(dplyr)
library(emmeans)
library(lme4)
library(lmerTest)
library(here)
library(ltm)
library(glmnet)
library(ggplot2)
library(stringi)
library(lubridate)
source('multi-choice-utils.R')
# Set up tableau color palette
tableau_palette = c("#4E79A7","#F28E2B","#E15759","#76B7B2","#59A14F","#EDC948","#B07AA1","#FF9DA7","#9C755F","#BAB0AC")
raw_experiment_data = read.csv('../experiment_data/raw_experiment_data.csv')
bad_workers = raw_experiment_data %>%
group_by(workerId_hash) %>%
summarize(
n=n()
) %>%
subset(n != 48)
experiment_data = raw_experiment_data %>%
subset(!(workerId_hash %in% bad_workers$workerId_hash)) %>%
identify_junk() %>%
subset(is_practice == "False") %>%
subset(passed_check == T) %>%
mutate(
trial_id =  paste(workerId_hash,hitId,predictor_city,sep='-'),
year = 2023,
) %>%
threshold_estimates()
bad_trials = experiment_data %>%
group_by(trial_id) %>%
summarize(num_temps = length(unique(temperature_estimate))) %>%
subset(num_temps <= 2) %>%
pull(trial_id) %>%
unique()
experiment_data = experiment_data %>%
mutate(
bad_trial = trial_id %in% bad_trials,
adjusted_temperature_estimate = case_when(
bad_trial ~ temperature_estimate + rnorm(n(),0,0.01),
TRUE ~ as.double(temperature_estimate)
)
) %>%
add_bootstrapping_estimates(4,F) %>%
mutate(
type = case_when(
type == 'challenging' ~ 'Challenging',
type == 'kind' ~ 'Kind',
type == 'wicked' ~ 'Wicked'
),
type = factor(type,levels=c('Kind','Challenging','Wicked'))
)
kind_cities = c('Baltimore', 'Charlotte', 'Denver', 'Orlando', 'Portland', 'Sacramento', 'San Antonio', 'St. Louis')
challenging_cities = c('Cairo', 'Delhi', 'Lagos', 'London', 'Mexico City', 'Paris', 'Tokyo', 'Toronto')
wicked_cities = c('Auckland', 'Buenos Aires', 'Johannesburg', 'Luanda', 'Lima', 'Sao Paulo', 'Sydney', 'Santiago')
all_cities = c(kind_cities,challenging_cities,wicked_cities)
experiment_data$ordered_predictor_city = factor(experiment_data$predictor_city,levels=all_cities)
# Estimate abilities from IRT model and add to experiment_data
# Prep worker data and irt data
# Add worker data to
worker_data = read.csv('../experiment_data/worker_data.csv')
irt_data = dplyr::select(worker_data,matches("correct"))
irt_data = irt_data[,order(colnames(irt_data))]
irt_data = data.frame(sapply(irt_data, \(x) +as.logical(x)))
# Convert to 0/1
#irt_model = ltm(irt_data ~ z1)
irt_model = tpm(irt_data) # Three-parameter model
# irt_model_og = ltm(irt_data ~ z1)
# Correlate scores from both models...
# og_ability = factor.scores(irt_model_og, resp.patterns = irt_data)$score.dat$z1
# new_ability =  factor.scores(irt_model, resp.patterns = irt_data)$score.dat$z1
# plot(og_ability,new_ability)
worker_data$ability = factor.scores(irt_model, resp.patterns = irt_data)$score.dat$z1
worker_data$num_correct = rowSums(irt_data)
# Merge worker data with experiment_test
experiment_data = experiment_data %>%
merge(worker_data,by='workerId_hash',all.x=T)
plot(irt_model,type="ICC")
knitr::opts_chunk$set(echo = TRUE)
# Load packages
library(dplyr)
library(emmeans)
library(lme4)
library(lmerTest)
library(here)
library(ltm)
library(glmnet)
library(ggplot2)
library(stringi)
library(ggpattern)
library(tidyr)
source('multi-choice-utils.R')
# Set up tableau color palette
tableau_palette = c("#4E79A7","#F28E2B","#E15759","#76B7B2","#59A14F","#EDC948","#B07AA1","#FF9DA7","#9C755F","#BAB0AC")
# tableau_palette = c("#E15759","#76B7B2","#59A14F","#EDC948","#B07AA1","#FF9DA7","#9C755F","#BAB0AC")
raw_experiment_data = read.csv('../experiment_data/raw_experiment_data.csv')
bad_workers = raw_experiment_data %>%
group_by(workerId_hash) %>%
summarize(
n=n()
) %>%
subset(n != 48)
experiment_data = raw_experiment_data %>%
subset(!(workerId_hash %in% bad_workers$workerId_hash)) %>%
identify_junk() %>%
subset(is_practice == "False") %>%
subset(passed_check == T) %>%
mutate(
trial_id =  paste(workerId_hash,hitId,predictor_city,sep='-'),
year = 2023,
) %>%
threshold_estimates()
bad_trials = experiment_data %>%
group_by(trial_id) %>%
summarize(num_temps = length(unique(temperature_estimate))) %>%
subset(num_temps <= 2) %>%
pull(trial_id) %>%
unique()
experiment_data = experiment_data %>%
mutate(
bad_trial = trial_id %in% bad_trials,
adjusted_temperature_estimate = case_when(
bad_trial ~ temperature_estimate + rnorm(n(),0,0.01),
TRUE ~ as.double(temperature_estimate)
)
) %>%
add_bootstrapping_estimates(4,F) %>%
mutate(
type = case_when(
type == 'challenging' ~ 'Challenging',
type == 'kind' ~ 'Kind',
type == 'wicked' ~ 'Wicked'
),
type = factor(type,levels=c('Kind','Challenging','Wicked'))
)
kind_cities = c('Baltimore', 'Charlotte', 'Denver', 'Orlando', 'Portland', 'Sacramento', 'San Antonio', 'St. Louis')
challenging_cities = c('Cairo', 'Delhi', 'Lagos', 'London', 'Mexico City', 'Paris', 'Tokyo', 'Toronto')
wicked_cities = c('Auckland', 'Buenos Aires', 'Johannesburg', 'Lima', 'Luanda', 'Santiago','Sao Paulo', 'Sydney')
all_cities = c(kind_cities,challenging_cities,wicked_cities)
experiment_data$ordered_predictor_city = factor(experiment_data$predictor_city,levels=all_cities)
experiment_data$pretty_condition = ifelse(experiment_data$condition=='forced-no-model','Control','Model assistance')
# Add worker data to
worker_data = read.csv("../experiment_data/worker_data.csv")
# Estimate abilities from IRT model and add to experiment_data
# Prep worker data and irt data
# Add worker data to
worker_data = read.csv("../experiment_data/worker_data.csv")
worker_data = worker_data %>%
subset(workerId_hash %in% unique(experiment_data$workerId_hash))
irt_data = dplyr::select(worker_data,matches("correct"))
irt_data = irt_data[,order(colnames(irt_data))]
irt_data = data.frame(sapply(irt_data, \(x) +as.logical(x)))
# Convert to 0/1
#irt_model = ltm(irt_data ~ z1)
irt_model = tpm(irt_data) # Three-parameter model
# irt_model_og = ltm(irt_data ~ z1)
# Correlate scores from both models...
# og_ability = factor.scores(irt_model_og, resp.patterns = irt_data)$score.dat$z1
# new_ability =  factor.scores(irt_model, resp.patterns = irt_data)$score.dat$z1
# plot(og_ability,new_ability)
worker_data$ability = factor.scores(irt_model, resp.patterns = irt_data)$score.dat$z1
worker_data$num_correct = rowSums(irt_data)
# Merge worker data with experiment_test
experiment_data = experiment_data %>%
merge(worker_data,by='workerId_hash',all.x=T)
# Overall error rates: bar plot
overall_errors = experiment_data %>%
group_by(pretty_condition) %>%
summarize(
average_error = mean(abs_error),
error_se = se(abs_error,n())
) %>%
ggplot(aes(x=pretty_condition,y=average_error,fill=pretty_condition)) +
geom_bar(stat='identity') +
geom_errorbar(aes(ymin=average_error - error_se,ymax = average_error+error_se),
size=0.7,width=0.4) +
labs(
x='Condition',
y='Mean absolute error',
) +
scale_y_continuous(labels = function(y) paste0(y, "°"), expand = c(0, 0), limits=c(0,19)) +
scale_fill_manual(values = tableau_palette) +
theme_classic() +
theme(
legend.position = 'none',
plot.title = element_text(hjust = 0.5),
axis.title.x=element_blank(),
)
ggsave("final_plots/errors_by_condition.pdf", overall_errors, width = 2.5, height = 4.5, units = "in")
overall_errors
city_data = experiment_data %>%
group_by(pretty_condition,type,ordered_predictor_city) %>%
summarize(
average_error = mean(abs_error),
average_error_se = se(abs_error,n())
)
average_error_by_city = city_data %>%
ggplot(aes(x=pretty_condition,y=average_error,color=pretty_condition,shape=pretty_condition)) +
geom_point(size=2) +
geom_errorbar(aes(ymin=average_error-average_error_se,ymax=average_error+average_error_se),
width=0.45,size=0.7) +
facet_wrap(. ~ ordered_predictor_city, ncol=8) +
scale_color_manual(values = tableau_palette) +
scale_y_continuous(labels = function(y) paste0(y, "°")) +
labs(
y='Mean absolute error',
color='Condition',
) +
theme(
axis.text.x = element_blank(),
axis.ticks.x = element_blank(),
axis.title.x = element_blank(),
legend.position='bottom'
)
city_data
average_error_by_city
knitr::opts_chunk$set(echo = TRUE)
# Get the directory of the current script
script_dir = dirname(rstudioapi::getSourceEditorContext()$path)
# Set the working directory
setwd(script_dir)
# Get the directory of the current script
script_dir = dirname(rstudioapi::getSourceEditorContext()$path)
# Set the working directory
setwd(script_dir)
# Install and load packages
if (!requireNamespace("remotes", quietly = TRUE)) install.packages("remotes")
packages = c("dplyr", "emmeans", "lme4", "lmerTest", "ltm", "glmnet", "ggplot2", "stringi", "lubridate")
versions = c("1.0.8", "1.8.1.1", "1.1.28", "3.1.3", "1.2.0", "4.1.4", "3.4.4", "1.7.6", "1.8.0")
for (i in seq_along(packages)) {
if (!requireNamespace(packages[i], quietly = TRUE) ||
packageVersion(packages[i]) != versions[i]) {
remotes::install_version(packages[i], version = versions[i])
}
library(packages[i], character.only = TRUE)
}
# Verify package versions
installed_versions = sapply(packages, packageVersion)
expected_versions = setNames(versions, packages)
all_correct = all(installed_versions == expected_versions)
if (!all_correct) {
incorrect = which(installed_versions != expected_versions)
warning(paste("Some package versions do not match the expected versions:",paste(names(incorrect), collapse = ", ")))
}
# Source additional script
source('multi-choice-utils.R')
# Print session info for reproducibility
sessionInfo()
here()
library(here())
packages = c("dplyr", "emmeans", "lme4", "lmerTest", "here", "ltm", "glmnet", "ggplot2", "stringi", "lubridate")
versions = c("1.0.8", "1.8.1.1", "1.1.28", "3.1.3", "1.0.1", "1.2.0", "4.1.4", "3.4.4", "1.7.6", "1.8.0")
for (i in seq_along(packages)) {
if (!requireNamespace(packages[i], quietly = TRUE) ||
packageVersion(packages[i]) != versions[i]) {
remotes::install_version(packages[i], version = versions[i])
}
library(packages[i], character.only = TRUE)
}
# Verify package versions
installed_versions = sapply(packages, packageVersion)
expected_versions = setNames(versions, packages)
all_correct = all(installed_versions == expected_versions)
if (!all_correct) {
incorrect = which(installed_versions != expected_versions)
warning(paste("Some package versions do not match the expected versions:",paste(names(incorrect), collapse = ", ")))
}
# Set the working directory to the directory the file lives in
setwd(here())
# Source additional script
source('multi-choice-utils.R')
getwd()
# Source additional script
source('multi-choice-utils.R')
packages = c("dplyr", "emmeans", "lme4", "lmerTest", "here", "ltm", "glmnet", "ggplot2", "stringi", "lubridate")
versions = c("1.0.8", "1.8.1.1", "1.1.28", "3.1.3", "1.0.1", "1.2.0", "4.1.4", "3.4.4", "1.7.6", "1.8.0")
for (i in seq_along(packages)) {
if (!requireNamespace(packages[i], quietly = TRUE) ||
packageVersion(packages[i]) != versions[i]) {
remotes::install_version(packages[i], version = versions[i])
}
library(packages[i], character.only = TRUE)
}
# Verify package versions
installed_versions = sapply(packages, packageVersion)
expected_versions = setNames(versions, packages)
all_correct = all(installed_versions == expected_versions)
if (!all_correct) {
incorrect = which(installed_versions != expected_versions)
warning(paste("Some package versions do not match the expected versions:",paste(names(incorrect), collapse = ", ")))
}
# Set the working directory to the directory the file lives in
setwd(here())
# Source additional script
source('multi-choice-utils.R')
packages = c("dplyr", "emmeans", "lme4", "lmerTest", "here", "ltm", "glmnet", "ggplot2", "stringi", "lubridate")
versions = c("1.0.8", "1.8.1.1", "1.1.28", "3.1.3", "1.0.1", "1.2.0", "4.1.4", "3.4.4", "1.7.6", "1.8.0")
for (i in seq_along(packages)) {
if (!requireNamespace(packages[i], quietly = TRUE) ||
packageVersion(packages[i]) != versions[i]) {
remotes::install_version(packages[i], version = versions[i])
}
library(packages[i], character.only = TRUE)
}
# Verify package versions
installed_versions = sapply(packages, packageVersion)
expected_versions = setNames(versions, packages)
all_correct = all(installed_versions == expected_versions)
if (!all_correct) {
incorrect = which(installed_versions != expected_versions)
warning(paste("Some package versions do not match the expected versions:",paste(names(incorrect), collapse = ", ")))
}
source(here("multi-choice-utils.R"))
packages = c("dplyr", "emmeans", "lme4", "lmerTest", "here", "ltm", "glmnet", "ggplot2", "stringi", "lubridate")
versions = c("1.0.8", "1.8.1.1", "1.1.28", "3.1.3", "1.0.1", "1.2.0", "4.1.4", "3.4.4", "1.7.6", "1.8.0")
for (i in seq_along(packages)) {
if (!requireNamespace(packages[i], quietly = TRUE) ||
packageVersion(packages[i]) != versions[i]) {
remotes::install_version(packages[i], version = versions[i])
}
library(packages[i], character.only = TRUE)
}
# Verify package versions
installed_versions = sapply(packages, packageVersion)
expected_versions = setNames(versions, packages)
all_correct = all(installed_versions == expected_versions)
if (!all_correct) {
incorrect = which(installed_versions != expected_versions)
warning(paste("Some package versions do not match the expected versions:",paste(names(incorrect), collapse = ", ")))
}
print(here())
source(here("multi-choice-utils.R"))
here()
packages = c("dplyr", "emmeans", "lme4", "lmerTest", "here", "ltm", "glmnet", "ggplot2", "stringi", "lubridate")
versions = c("1.0.8", "1.8.1.1", "1.1.28", "3.1.3", "1.0.1", "1.2.0", "4.1.4", "3.4.4", "1.7.6", "1.8.0")
for (i in seq_along(packages)) {
if (!requireNamespace(packages[i], quietly = TRUE) ||
packageVersion(packages[i]) != versions[i]) {
remotes::install_version(packages[i], version = versions[i])
}
library(packages[i], character.only = TRUE)
}
# Verify package versions
installed_versions = sapply(packages, packageVersion)
expected_versions = setNames(versions, packages)
all_correct = all(installed_versions == expected_versions)
if (!all_correct) {
incorrect = which(installed_versions != expected_versions)
warning(paste("Some package versions do not match the expected versions:",paste(names(incorrect), collapse = ", ")))
}
print(here())
source(here("data_analysis/multi-choice-utils.R"))
pkg_versions <- sapply(c("dplyr", "emmeans", "lme4", "lmerTest", "here", "ltm", "glmnet", "ggplot2", "stringi", "ggpattern", "tidyr", function(x) as.character(packageVersion(x)))
)
pkg_versions <- sapply(c("dplyr", "emmeans", "lme4", "lmerTest", "here", "ltm", "glmnet", "ggplot2", "stringi", "ggpattern", "tidyr"), function(x) as.character(packageVersion(x)))
pkg_versions
knitr::opts_chunk$set(echo = TRUE)
packages <- c("dplyr", "emmeans", "lme4", "lmerTest", "here", "ltm", "glmnet", "ggplot2", "stringi", "lubridate", "ggpattern", "tidyr")
versions <- c("1.0.8", "1.8.1.1", "1.1.28", "3.1.3", "1.0.1", "1.2.0", "4.1.4", "3.4.4", "1.7.6", "1.8.0", "1.0.1", "1.2.0")
# Install remotes if not already installed
if (!requireNamespace("remotes", quietly = TRUE)) install.packages("remotes")
for (i in seq_along(packages)) {
if (!requireNamespace(packages[i], quietly = TRUE) ||
packageVersion(packages[i]) != versions[i]) {
remotes::install_version(packages[i], version = versions[i])
}
library(packages[i], character.only = TRUE)
}
# Verify package versions
installed_versions <- sapply(packages, packageVersion)
expected_versions <- setNames(versions, packages)
all_correct <- all(installed_versions == expected_versions)
if (!all_correct) {
incorrect <- which(installed_versions != expected_versions)
warning(paste("Some package versions do not match the expected versions:",
paste(names(incorrect), collapse = ", ")))
}
print(here())
source(here("data_analysis", "multi-choice-utils.R"))
# Print session info for reproducibility
sessionInfo()
print("hi",5)
